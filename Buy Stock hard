public class Solution {
    public int MaxProfit(int k, int[] prices) {
        int n = prices.Length;
        if (n == 0) return 0;

        // If k is greater than n/2, it's equivalent to unlimited transactions
        if (k >= n / 2) {
            int maxProfit = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i - 1]) {
                    maxProfit += prices[i] - prices[i - 1];
                }
            }
            return maxProfit;
        }

        // DP arrays
        int[,] dp = new int[k + 1, n];

        for (int i = 1; i <= k; i++) {
            int maxDiff = -prices[0];
            for (int j = 1; j < n; j++) {
                dp[i, j] = Math.Max(dp[i, j - 1], prices[j] + maxDiff);
                maxDiff = Math.Max(maxDiff, dp[i - 1, j] - prices[j]);
            }
        }

        return dp[k, n - 1];
    }
}
