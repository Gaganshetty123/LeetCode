public class Solution {
    public int NumDistinct(string s, string t) {
        int m = s.Length;
        int n = t.Length;
        
        // Create a 2D array to store the results of subproblems
        int[,] dp = new int[m + 1, n + 1];
        
        // Initialize the first column: dp[i][0] = 1 for all i
        // An empty string is a subsequence of any string
        for (int i = 0; i <= m; i++) {
            dp[i, 0] = 1;
        }
        
        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                // If the characters match, we can either use this character or skip it
                if (s[i - 1] == t[j - 1]) {
                    dp[i, j] = dp[i - 1, j - 1] + dp[i - 1, j];
                } else {
                    // If the characters don't match, we skip this character
                    dp[i, j] = dp[i - 1, j];
                }
            }
        }
        
        // The result is in dp[m][n]
        return dp[m, n];
    }
}
